import java.io.*;
import java.util.*;

public class Main {

    static int N, K;
    static int[][] grid;
    static boolean[][] visited;
    static final int[] dr = {-1, 1, 0, 0};
    static final int[] dc = {0, 0, -1, 1};

    static int bfs(int sr, int sc, int type) {
        Deque<int[]> q = new ArrayDeque<>();
        visited[sr][sc] = true;
        q.offer(new int[]{sr, sc});
        int size = 0;

        while (!q.isEmpty()) {
            int[] cur = q.poll();
            int r = cur[0], c = cur[1];
            size++;

            for (int k = 0; k < 4; k++) {
                int nr = r + dr[k], nc = c + dc[k];
                if (nr < 0 || nr >= N || nc < 0 || nc >= N) continue;
                if (visited[nr][nc]) continue;
                if (grid[nr][nc] != type) continue;
                visited[nr][nc] = true;
                q.offer(new int[]{nr, nc});
            }
        }
        return size;
    }

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        K = Integer.parseInt(st.nextToken());

        grid = new int[N][N];
        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < N; j++) {
                grid[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        visited = new boolean[N][N];
        int[] countByType = new int[31]; // 건물 유형은 1..30

        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (!visited[i][j]) {
                    int type = grid[i][j];
                    int sz = bfs(i, j, type);
                    if (sz >= K) countByType[type]++;
                }
            }
        }

        // 단지 수 최댓값, 동률이면 더 큰 유형 번호 선택
        int bestType = 1, bestCnt = -1;
        for (int t = 1; t <= 30; t++) {
            if (countByType[t] > bestCnt || (countByType[t] == bestCnt && t > bestType)) {
                bestCnt = countByType[t];
                bestType = t;
            }
        }

        System.out.println(bestType);
    }
}
